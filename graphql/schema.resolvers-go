// package graphql

// // This file will be automatically regenerated based on the schema, any resolver implementations
// // will be copied through when generating and any unknown code will be moved to the end.
// // Code generated by github.com/99designs/gqlgen version v0.17.34

// import (
// 	"context"
// 	"fmt"

// 	"github.com/rafaelcarvalhocaetano/meetup/graphql/model"
// )

// // User is the resolver for the user field.
// // func (r *meetupResolver) User(ctx context.Context, obj *model.Meetup) (*model.User, error) {
// // 	return r.UserRepo.GetUserByID(obj.UserID)
// // }

// // CreateMeetup is the resolver for the createMeetup field.
// // func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*model.Meetup, error) {
// // 	if len(input.Name) < 5 {
// // 		return nil, errors.New("name not long enough")
// // 	}

// // 	meetup := &model.Meetup{
// // 		ID:          uuid.New().String(),
// // 		Name:        input.Name,
// // 		Description: input.Description,
// // 		UserID:      "ecbbaab4-1550-4d2b-abf7-802298543e88",
// // 	}

// // 	return r.MeetupRepo.Create(meetup)
// // }

// // Meetup is the resolver for the Meetup field.
// // func (r *queryResolver) Meetup(ctx context.Context) ([]*model.Meetup, error) {
// // 	panic(fmt.Errorf("not implemented: Meetup - Meetup"))
// // }

// // // Meetups is the resolver for the meetups field.
// // func (r *userResolver) Meetups(ctx context.Context, obj *model.User) ([]*model.Meetup, error) {
// // 	// var m []*model.Meetup
// // 	// for _, meetup := range meetups {
// // 	// 	if meetup.UserID == obj.ID {
// // 	// 		m = append(m, meetup)
// // 	// 	}
// // 	// }
// // 	// return m, nil
// // 	return r.MeetupRepo.GetMeetups()
// // }

// // Meetup returns MeetupResolver implementation.
// // func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

// // Mutation returns MutationResolver implementation.
// // func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// // Query returns QueryResolver implementation.
// // func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// // User returns UserResolver implementation.
// // func (r *Resolver) User() UserResolver { return &userResolver{r} }

// // type meetupResolver struct{ *Resolver }
// // type mutationResolver struct{ *Resolver }
// // type queryResolver struct{ *Resolver }

// // type userResolver struct{ *Resolver }
